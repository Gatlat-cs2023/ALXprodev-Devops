
#!/bin/bash

# Directory containing Pokémon JSON files
DATA_DIR="pokemon_data"

# Output CSV file
REPORT_FILE="pokemon_report.csv"

# Initialize the CSV with headers
echo "Name,Height (m),Weight (kg)" > "$REPORT_FILE"

# Process each JSON file
for file in "$DATA_DIR"/*.json
do
    name=$(jq -r '.name' "$file" | sed 's/.*/\u&/')
    height=$(jq -r '.height' "$file" | awk '{printf "%.1f", $1 / 10}')
    weight=$(jq -r '.weight' "$file" | awk '{printf "%.1f", $1 / 10}')
    echo "$name,$height,$weight" >> "$REPORT_FILE"
done

# Print report location
echo "CSV Report generated at: $REPORT_FILE"
echo ""

# Display the report
cat "$REPORT_FILE"

echo ""

# Calculate averages using awk
awk -F',' 'NR > 1 {
    height_sum += $2
    weight_sum += $3
    count++
}
END {
    if (count > 0) {
        printf "Average Height: %.2f m\n", height_sum / count
        printf "Average Weight: %.2f kg\n", weight_sum / count
    }
}' "$REPORT_FILE"

# List of Pokémon to fetch
pokemons=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory for JSON files
mkdir -p pokemon_data

# Loop through each Pokémon
for name in "${pokemons[@]}"
do
    echo "Fetching data for $name..."

    success=false
    attempts=0

    while [ $attempts -lt 3 ]; do
        # Try to fetch data
        if curl -s -f "https://pokeapi.co/api/v2/pokemon/$name" -o "pokemon_data/${name}.json"; then
            echo "Saved data to pokemon_data/${name}.json ✅"
            success=true
            break
        else
            echo "Attempt $((attempts+1)) failed for $name."
            sleep 1
            ((attempts++))
        fi
    done

    if [ "$success" = false ]; then
        echo "Failed to fetch data for $name after 3 attempts ❌" >> errors.txt
    fi

    sleep 1  # Rate limit delay
done
